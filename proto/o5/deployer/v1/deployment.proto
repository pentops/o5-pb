syntax = "proto3";

package o5.deployer.v1;

import "listify/annotations/v1/annotations.proto";
import "o5/deployer/v1/application.proto";
import "o5/deployer/v1/event.proto";

option go_package = "github.com/pentops/o5-go/deployer/v1/deployer_pb";

message DeploymentState {
  string deployment_id = 1;
  DeploymentStatus status = 2 [(listify.annotations.v1.rules).enum.filtering = { filterable: true }];
  DeploymentSpec spec = 3;

  string stack_name = 4 [(listify.annotations.v1.rules).string.open_text.searching.searchable = true];
  string stack_id = 7 [(listify.annotations.v1.rules).string.foreign_key.uuid.filtering.filterable = true];

  optional string waiting_on_remote_phase = 8;

  StackLifecycle last_stack_lifecycle = 9;

  repeated KeyValue stack_output = 6;
  repeated DatabaseMigrationState data_migrations = 5;
}

message DeploymentSpec {
  string app_name = 1 [(listify.annotations.v1.rules).string.open_text.searching.searchable = true];
  string version = 2 [(listify.annotations.v1.rules).string.open_text.searching.searchable = true];
  string environment_name = 3 [(listify.annotations.v1.rules).string.open_text.searching.searchable = true];
  string template_url = 4 [(listify.annotations.v1.rules).string.open_text.searching.searchable = true];


  bool cancel_updates = 8 [(listify.annotations.v1.rules).bool.filtering.filterable = true];
  bool rotate_credentials = 9 [(listify.annotations.v1.rules).bool.filtering.filterable = true];
  string ecs_cluster = 10 [(listify.annotations.v1.rules).string.open_text.searching.searchable = true];

  // Skips scale up/down, directly applying the updates in one infra call.
  bool quick_mode = 11 [(listify.annotations.v1.rules).bool.filtering.filterable = true];

  repeated PostgresDatabase databases = 5;
  repeated CloudFormationStackParameter parameters = 6;
  repeated SNSTopic sns_topics = 7;
}


enum DeploymentStatus {
  DEPLOYMENT_STATUS_UNSPECIFIED = 0;
  DEPLOYMENT_STATUS_QUEUED = 1;
  DEPLOYMENT_STATUS_TRIGGERED = 2;
  DEPLOYMENT_STATUS_WAITING = 3;
  DEPLOYMENT_STATUS_AVAILABLE = 4;
  DEPLOYMENT_STATUS_SCALING_DOWN = 5;
  DEPLOYMENT_STATUS_SCALED_DOWN = 6;
  DEPLOYMENT_STATUS_INFRA_MIGRATE = 7;
  DEPLOYMENT_STATUS_INFRA_MIGRATED = 8;
  DEPLOYMENT_STATUS_DB_MIGRATING = 9;
  DEPLOYMENT_STATUS_DB_MIGRATED = 10;
  DEPLOYMENT_STATUS_SCALING_UP = 11;
  DEPLOYMENT_STATUS_SCALED_UP = 12;
  DEPLOYMENT_STATUS_CREATING = 13;
  DEPLOYMENT_STATUS_UPSERTING = 15; // Single shot upsert of stack
  DEPLOYMENT_STATUS_UPSERTED = 16;

  DEPLOYMENT_STATUS_DONE = 100;
  DEPLOYMENT_STATUS_FAILED = 101;
}



message DeploymentEvent {
  EventMetadata metadata = 1;
  string deployment_id = 2;
  DeploymentEventType event = 3;
}

enum StackLifecycle {
  STACK_LIFECYCLE_UNSPECIFIED = 0;

  // Progressing well, no errors, no rollback
  STACK_LIFECYCLE_PROGRESS = 1;

  // Update or Create Completed successfully
  STACK_LIFECYCLE_COMPLETE = 2;

  // Rolling back to previous version or deleting on create failure
  STACK_LIFECYCLE_ROLLING_BACK = 3;

  // Create failure, rolled back to nothing
  STACK_LIFECYCLE_CREATE_FAILED = 4;

  // Update failure, rolled back to previous version
  STACK_LIFECYCLE_TERMINAL = 5;

  // Missing, not present currently, either never created or deleted, not not
  // 'rolled back'
  STACK_LIFECYCLE_MISSING = 6;
}


message DeploymentEventType {
  oneof type {
    Created created = 1;
    Triggered triggered = 2;

    StackCreate stack_create = 3;

    StackWait stack_wait = 4;
    StackScale stack_scale = 13;
    StackTrigger stack_trigger = 5;
    StackUpsert stack_upsert = 7;
    StackStatus stack_status = 6;

    MigrateData migrate_data = 8;

    DBMigrateStatus db_migrate_status = 9;

    DataMigrated data_migrated = 12;

    Error error = 99;
    Done done = 100;
  }

  message Created {
    DeploymentSpec spec = 1;
  }

  message Triggered {
  }

  message StackCreate {
  }

  // Waits for the stack to be ready, without making any changes
  message StackWait {
  }

  message StackScale {
    int32 desired_count= 1;
  }

  // Triggers a stack update, then wait
  message StackTrigger {
    string phase = 1;
  }

  // Triggers a stack be created or updated to the latest version, fully scaled,
  // in one single infra call. This is performed prior to DB migrations, so be
  // careful with the compatibility of the two, i.e. the service must be able to
  // come online prior to the DB migration completing.
  message StackUpsert {
  }

  message StackStatus {
    StackLifecycle lifecycle = 1;
    string full_status = 2;
    repeated KeyValue stack_output = 3;
    string deployment_phase = 4;
  }

  // Triggers a DB migration of 0 or more databases
  message MigrateData {
    repeated DatabaseMigration databases = 1;
  }

  message DBMigrateStatus{
    string db_name = 1;
    string migration_id = 2;
    DatabaseMigrationStatus status = 3;
    optional string error = 4;
  }

  // Triggered when all the DBs are migrated
  message DataMigrated {
  }

  message Error {
    string error = 1;
  }

  message Done { }

}

message DatabaseMigration {
  string migration_id = 1;
  string db_name = 2;
}

message DatabaseMigrationState {
  string migration_id = 1 [(listify.annotations.v1.rules).string.foreign_key.uuid.filtering.filterable = true];
  string db_name = 2 [(listify.annotations.v1.rules).string.open_text.searching.searchable = true];
  bool rotate_credentials = 3 [(listify.annotations.v1.rules).bool.filtering.filterable = true];
  DatabaseMigrationStatus status = 4 [(listify.annotations.v1.rules).enum.filtering = { filterable: true }];
}

enum DatabaseMigrationStatus {
  DATABASE_MIGRATION_STATUS_UNSPECIFIED = 0;
  DATABASE_MIGRATION_STATUS_PENDING = 1;
  DATABASE_MIGRATION_STATUS_RUNNING = 2;
  DATABASE_MIGRATION_STATUS_CLEANUP = 3;
  DATABASE_MIGRATION_STATUS_COMPLETED = 4;
  DATABASE_MIGRATION_STATUS_FAILED = 5;
}
