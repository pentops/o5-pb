syntax = "proto3";

package o5.deployer.v1;

import "buf/validate/validate.proto";
import "o5/deployer/v1/event.proto";
import "o5/messaging/v1/reqres.proto";
import "psm/state/v1/annotations.proto";

option go_package = "github.com/pentops/o5-go/deployer/v1/deployer_pb";

message ECSTaskState {
  option (psm.state.v1.state).name = "ecs_task";

  string task_id = 1;

  ECSTaskStatus status = 2;

  ECSTaskSpec spec = 3;

  ECSTaskSummary last_summary = 4;

  optional o5.messaging.v1.RequestMetadata callback = 7;
}

enum ECSTaskStatus {
  ECS_TASK_STATUS_UNSPECIFIED = 0;
  ECS_TASK_STATUS_REQUESTED = 1;
  ECS_TASK_STATUS_RUNNING = 2;
  ECS_TASK_STATUS_STOPED = 3;
  ECS_TASK_STATUS_DONE = 4;
  ECS_TASK_STATUS_ERROR = 5;
}

message ECSTaskSpec {
  string cluster_name = 1;
  string task_definition_arn = 2;
}

message ECSTaskEvent {
  option (psm.state.v1.event).name = "ecs_task";
  EventMetadata metadata = 1 [
    (psm.state.v1.event_field).metadata = true,
    (buf.validate.field).required = true
  ];
  string task_id = 2 [
    (psm.state.v1.event_field).state_key = true,
    (buf.validate.field).string.uuid = true
  ];
  ECSTaskEventType event = 3 [
    (psm.state.v1.event_field).event_type = true,
    (buf.validate.field).required = true
  ];
}

message ECSTaskEventType {
  oneof type {
    Requested requested = 1;
    Status status = 2;
    Error error = 3;
    Done done = 4;
  }

  message Requested {
    ECSTaskSpec spec = 1;
    optional o5.messaging.v1.RequestMetadata callback = 7;
  }

  message Status {
    ECSTaskSummary summary = 1;
  }

  message Error {
    string stage = 1;
    string error = 2;
  }

  message Done {}
}

message ECSTaskSummary {
  AwsEcsTaskStatus last_status = 1;
  AwsEcsTaskStatus desired_status = 2;
  repeated Container containers = 3;
  optional AwsEcsStopCode stop_code = 4;
  optional string stop_reason = 5;
  repeated AwsTag tags = 6;

  message Container {
    string name = 1;
    AwsEcsTaskStatus last_status = 2;
    optional int32 exit_code = 4;
    optional string reason = 5;
  }
}

message AwsTag {
  string key = 1;
  string value = 2;
}

enum AwsEcsTaskStatus {
  AWS_ECS_TASK_STATUS_UNSPECIFIED = 0;
  AWS_ECS_TASK_STATUS_PROVISIONING = 1;
  AWS_ECS_TASK_STATUS_PENDING = 2;
  AWS_ECS_TASK_STATUS_ACTIVATING = 3;
  AWS_ECS_TASK_STATUS_RUNNING = 4;
  AWS_ECS_TASK_STATUS_DEACTIVATING = 5;
  AWS_ECS_TASK_STATUS_STOPPING = 6;
  AWS_ECS_TASK_STATUS_DEPROVISIONING = 7;
  AWS_ECS_TASK_STATUS_STOPPED = 8;
}

enum AwsEcsStopCode {
  AWS_ECS_STOP_CODE_UNSPECIFIED = 0;
  AWS_ECS_STOP_CODE_ESSENTIAL_CONTAINER_EXITED = 1;
  AWS_ECS_STOP_CODE_TASK_FAILED_TO_START = 2;
  AWS_ECS_STOP_CODE_USER_INITIATED = 3;
  AWS_ECS_STOP_CODE_SERVICE_SCHEDULER_INITIATED = 4;
  AWS_ECS_STOP_CODE_SPOT_INTERRUPTION = 5;
  AWS_ECS_STOP_CODE_TERMINATION_NOTICE = 6;
}
