syntax = "proto3";

package o5.deployer.v1;

import "buf/validate/validate.proto";
import "o5/deployer/v1/event.proto";
import "psm/state/v1/annotations.proto";

option go_package = "github.com/pentops/o5-go/deployer/v1/deployer_pb";

message StackState {
  option (psm.state.v1.state).name = "stack";
  string stack_id = 1 [(buf.validate.field).string.uuid = true];
  StackStatus status = 2;

  optional StackDeployment current_deployment = 3;

  string application_name = 4;
  string environment_name = 5;
  string environment_id = 8;

  repeated StackDeployment queued_deployments = 6;

  StackLifecycle last_stack_lifecycle = 9;

  StackConfig config = 10;
}

message StackConfig {
  CodeSourceType code_source = 10;
}

enum StackStatus {
  STACK_STATUS_UNSPECIFIED = 0;
  STACK_STATUS_CREATING = 1;
  STACK_STATUS_STABLE = 2;
  STACK_STATUS_AVAILABLE = 3;
  STACK_STATUS_MIGRATING = 4;
  STACK_STATUS_BROKEN = 5;
}

message StackDeployment {
  string deployment_id = 1 [(buf.validate.field).string.uuid = true];
  string version = 2;
}

message CodeSourceType {
  oneof type {
    Github github = 1;
  }

  message Github {
    string owner = 1;
    string repo = 2;
    string ref_pattern = 3;
  }
}

message StackEvent {
  option (psm.state.v1.event).name = "stack";

  EventMetadata metadata = 1 [
    (psm.state.v1.event_field).metadata = true,
    (buf.validate.field).required = true
  ];

  string stack_id = 2 [
    (psm.state.v1.event_field).state_key = true,
    (buf.validate.field).string.uuid = true
  ];

  StackEventType event = 3 [
    (psm.state.v1.event_field).event_type = true,
    (buf.validate.field).required = true
  ];
}

message StackEventType {
  oneof type {
    Configured configured = 2;

    Triggered triggered = 3;
    DeploymentCompleted deployment_completed = 4;
    DeploymentFailed deployment_failed = 5;
    Available available = 6;
  }

  message Configured {
    string application_name = 1;
    string environment_id = 2;
    string environment_name = 3;
    StackConfig config = 4;
  }

  message Triggered {
    StackDeployment deployment = 1;
    string application_name = 2;
    string environment_name = 3;
    string environment_id = 4;
  }

  message DeploymentCompleted {
    StackDeployment deployment = 1;
  }

  message DeploymentFailed {
    StackDeployment deployment = 1;
    string error = 2;
  }

  message Available {}
}

enum StackLifecycle {
  STACK_LIFECYCLE_UNSPECIFIED = 0;

  // Progressing well, no errors, no rollback
  STACK_LIFECYCLE_PROGRESS = 1;

  // Update or Create Completed successfully
  STACK_LIFECYCLE_COMPLETE = 2;

  // Rolling back to previous version or deleting on create failure
  STACK_LIFECYCLE_ROLLING_BACK = 3;

  // Create failure, rolled back to nothing
  STACK_LIFECYCLE_CREATE_FAILED = 4;

  // Update or create failure
  STACK_LIFECYCLE_TERMINAL = 5;

  // Update failure, rolled back to previous version and now stable.
  // Good when waiting, bad when updating or scaling.
  STACK_LIFECYCLE_ROLLED_BACK = 7;

  // Missing, not present currently, either never created or deleted, not not
  // 'rolled back'
  STACK_LIFECYCLE_MISSING = 6;
}
