syntax = "proto3";

package o5.messaging.v1.topic;

import "buf/validate/validate.proto";
import "google/protobuf/empty.proto";
import "o5/messaging/v1/annotations.proto";
import "o5/messaging/v1/message.proto";

option go_package = "github.com/pentops/o5-go/messaging/v1/messaging_tpb";

service DeadMessageTopic {
  option (o5.messaging.v1.config).unicast.name = "dead-letter";

  rpc Dead(DeadMessage) returns (google.protobuf.Empty) {}
}

message DeadMessage {
  // Generated by the handler on failure, so that multiple failures of the same
  // message (either through replay or multiple services working on the same
  // cause) are not de-duplicated. This is used as the message_id on the wire
  // message when sent, the original message_id is in the message field.
  string death_id = 1 [(buf.validate.field).string.uuid = true];

  // The o5.application.name which attepmted to handle the message
  string handler_app = 2;

  // The o5.environment.full_name which attepmted to handle the message
  string handler_env = 3;

  // The message which was not able to be handled
  o5.messaging.v1.Message message = 4;

  // The problem which caused the message to die
  Problem problem = 5;

  Infra infra = 6;
}

message Problem {
  oneof type {
    UnhandledError unhandled_error = 2;
  }

  message UnhandledError {
    string error = 1;
  }
}

message Infra {
  string type = 1;
  map<string, string> metadata = 2;
}
